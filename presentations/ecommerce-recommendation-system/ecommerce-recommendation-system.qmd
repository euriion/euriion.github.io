---
title: "E-commerce 상품추천 시스템"
subtitle: "개인화된 쇼핑 경험을 위한 AI 기반 추천 시스템 구축"
author: "홍성학"
date: today
format: 
  revealjs:
    theme: night
    transition: slide
    background-transition: fade
    highlight-style: github
    code-fold: true
    code-tools: true
    slide-number: true
    chalkboard: true
    scrollable: true
    incremental: false
    footer: "E-commerce 상품추천 시스템 | 홍성학"
    css: custom.css
    include-in-header:
      - text: |
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
mermaid:
  theme: dark
editor: visual
---

## 상품추천 시스템이란? {.smaller}

::: {.incremental}
- <i class="fas fa-shopping-cart"></i> 고객의 **행동 패턴**과 **선호도**를 분석하여 개인화된 상품을 제안하는 시스템
- <i class="fas fa-bullseye"></i> 고객이 **구매할 가능성이 높은** 상품을 자동으로 추천
- <i class="fas fa-chart-line"></i> **매출 증대**와 **고객 만족도 향상**을 동시에 달성
- <i class="fas fa-robot"></i> **머신러닝**과 **빅데이터 분석** 기술을 활용
:::

::: {.notes}
추천 시스템은 현대 e-commerce의 핵심 기술로, 고객 경험을 개선하고 비즈니스 성과를 높이는 중요한 역할을 합니다.
:::

## 왜 상품추천 시스템이 필요한가? {.smaller}

::: {.columns}
::: {.column width="50%"}
### 고객 관점
- <i class="fas fa-clock"></i> **시간 절약**: 원하는 상품을 빠르게 발견
- <i class="fas fa-heart"></i> **개인화**: 취향에 맞는 상품 발견
- <i class="fas fa-surprise"></i> **새로운 발견**: 몰랐던 상품과의 만남
- <i class="fas fa-smile"></i> **편의성**: 쇼핑 경험 개선
:::

::: {.column width="50%"}
### 비즈니스 관점
- <i class="fas fa-dollar-sign"></i> **매출 증대**: 평균 15-30% 매출 향상
- <i class="fas fa-users"></i> **고객 유지**: 재구매율 증가
- <i class="fas fa-eye"></i> **체류 시간**: 사이트 이용 시간 증가
- <i class="fas fa-chart-bar"></i> **전환율**: 구매 전환율 향상
:::
:::

## 추천 시스템의 비즈니스 임팩트 {.smaller}

### 주요 성과 지표
- <i class="fas fa-percentage"></i> **Amazon**: 매출의 35%가 추천 시스템에서 발생
- <i class="fas fa-play"></i> **Netflix**: 시청 시간의 80%가 추천 콘텐츠
- <i class="fas fa-music"></i> **Spotify**: 사용자의 31%가 추천 플레이리스트 이용
- <i class="fas fa-shopping-bag"></i> **Alibaba**: 추천 시스템으로 클릭률 20% 증가

### ROI 측정
- <i class="fas fa-calculator"></i> **직접 효과**: 추천 상품 구매율
- <i class="fas fa-link"></i> **간접 효과**: 브랜드 인지도, 고객 만족도
- <i class="fas fa-coins"></i> **비용 절감**: 마케팅 비용 효율성
- <i class="fas fa-trophy"></i> **경쟁 우위**: 고객 경험 차별화

## 추천 시스템의 주요 유형 {.smaller}

### 1. 협업 필터링 (Collaborative Filtering)
::: {.incremental}
- <i class="fas fa-users"></i> **사용자 기반**: 비슷한 취향의 사용자들이 좋아한 상품 추천
- <i class="fas fa-box"></i> **아이템 기반**: 구매한 상품과 유사한 상품 추천
- <i class="fas fa-star"></i> **평점 데이터** 활용
- <i class="fas fa-exclamation-triangle"></i> **Cold Start 문제**: 신규 사용자/상품 처리 어려움
:::

### 2. 콘텐츠 기반 필터링 (Content-Based)
::: {.incremental}
- <i class="fas fa-tags"></i> **상품 속성** 분석: 카테고리, 브랜드, 가격, 특징
- <i class="fas fa-user-circle"></i> **사용자 프로필** 구축
- <i class="fas fa-search"></i> **유사도 계산**: 코사인 유사도, 유클리드 거리
- <i class="fas fa-check"></i> **장점**: 신규 상품도 추천 가능
:::

## 추천 시스템의 주요 유형 (계속) {.smaller}

### 3. 하이브리드 추천 시스템
::: {.incremental}
- <i class="fas fa-puzzle-piece"></i> **다중 접근법**: 여러 기법을 조합
- <i class="fas fa-balance-scale"></i> **가중 결합**: 각 방법의 결과를 가중평균
- <i class="fas fa-layer-group"></i> **스위칭**: 상황에 따라 다른 방법 사용
- <i class="fas fa-rocket"></i> **성능 향상**: 단일 방법보다 우수한 성능
:::

### 4. 딥러닝 기반 추천
::: {.incremental}
- <i class="fas fa-brain"></i> **신경망**: Deep Neural Networks
- <i class="fas fa-project-diagram"></i> **AutoEncoder**: 차원 축소와 특징 학습
- <i class="fas fa-sync"></i> **RNN/LSTM**: 순차적 행동 패턴 학습
- <i class="fas fa="transformer"></i> **Transformer**: 어텐션 메커니즘 활용
:::

## 추천 시스템 구축 프로세스 {.smaller}

```{mermaid}
graph TD
    A[데이터 수집] --> B[데이터 전처리]
    B --> C[탐색적 데이터 분석]
    C --> D[특징 엔지니어링]
    D --> E[모델 선택]
    E --> F[모델 학습]
    F --> G[모델 평가]
    G --> H[배포 및 서빙]
    H --> I[모니터링]
    I --> J[모델 업데이트]
    J --> F
```

## 데이터 수집 및 전처리 {.smaller}

### 필수 데이터 유형
- <i class="fas fa-mouse-pointer"></i> **행동 데이터**: 클릭, 조회, 구매, 장바구니 추가
- <i class="fas fa-user"></i> **사용자 데이터**: 나이, 성별, 지역, 구매 이력
- <i class="fas fa-box"></i> **상품 데이터**: 카테고리, 브랜드, 가격, 설명, 이미지
- <i class="fas fa-clock"></i> **시간 데이터**: 계절성, 트렌드, 시간대별 패턴

### 데이터 전처리 과정
::: {.incremental}
- <i class="fas fa-broom"></i> **데이터 정제**: 결측값, 이상값 처리
- <i class="fas fa-compress"></i> **정규화**: 스케일링, 표준화
- <i class="fas fa-tags"></i> **범주형 인코딩**: 원-핫 인코딩, 라벨 인코딩
- <i class="fas fa-filter"></i> **피처 선택**: 중요한 특징 선별
:::

## 협업 필터링 구현 {.smaller}

### 사용자-아이템 매트릭스
```python
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# 사용자-아이템 매트릭스 생성
user_item_matrix = ratings.pivot_table(
    index='user_id', 
    columns='item_id', 
    values='rating'
).fillna(0)

# 사용자 간 유사도 계산
user_similarity = cosine_similarity(user_item_matrix)

# 추천 점수 계산
def get_recommendations(user_id, num_recommendations=10):
    user_idx = user_item_matrix.index.get_loc(user_id)
    sim_scores = user_similarity[user_idx]
    
    # 가중 평균으로 추천 점수 계산
    recommendations = np.dot(sim_scores, user_item_matrix.values)
    
    return recommendations.argsort()[::-1][:num_recommendations]
```

## 콘텐츠 기반 필터링 구현 {.smaller}

### TF-IDF를 활용한 상품 유사도
```python
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# 상품 설명 텍스트 벡터화
tfidf = TfidfVectorizer(
    max_features=5000,
    stop_words='english',
    ngram_range=(1, 2)
)

# 상품 설명을 TF-IDF 매트릭스로 변환
tfidf_matrix = tfidf.fit_transform(products['description'])

# 코사인 유사도 계산
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

def content_based_recommendations(product_id, num_recommendations=10):
    idx = products[products['id'] == product_id].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    
    # 가장 유사한 상품들의 인덱스 반환
    product_indices = [i[0] for i in sim_scores[1:num_recommendations+1]]
    return products.iloc[product_indices]
```

## 딥러닝 기반 추천 시스템 {.smaller}

### Neural Collaborative Filtering
```python
import tensorflow as tf
from tensorflow.keras import layers, Model

class NCF(Model):
    def __init__(self, num_users, num_items, embedding_size=50):
        super(NCF, self).__init__()
        
        # 사용자 임베딩
        self.user_embedding = layers.Embedding(num_users, embedding_size)
        self.user_bias = layers.Embedding(num_users, 1)
        
        # 아이템 임베딩
        self.item_embedding = layers.Embedding(num_items, embedding_size)
        self.item_bias = layers.Embedding(num_items, 1)
        
        # 신경망 레이어
        self.dense1 = layers.Dense(128, activation='relu')
        self.dense2 = layers.Dense(64, activation='relu')
        self.output_layer = layers.Dense(1, activation='sigmoid')
        
    def call(self, inputs):
        user_id, item_id = inputs
        
        # 임베딩 벡터 추출
        user_vec = self.user_embedding(user_id)
        item_vec = self.item_embedding(item_id)
        
        # 벡터 결합
        concat_vec = tf.concat([user_vec, item_vec], axis=1)
        
        # 신경망 통과
        x = self.dense1(concat_vec)
        x = self.dense2(x)
        
        return self.output_layer(x)
```

## 추천 시스템 평가 지표 {.smaller}

### 정확도 지표
- <i class="fas fa-bullseye"></i> **정밀도 (Precision)**: 추천한 상품 중 실제 구매한 비율
- <i class="fas fa-search"></i> **재현율 (Recall)**: 실제 구매한 상품 중 추천한 비율
- <i class="fas fa-balance-scale"></i> **F1-Score**: 정밀도와 재현율의 조화평균
- <i class="fas fa-chart-line"></i> **AUC-ROC**: 분류 성능 종합 지표

### 랭킹 지표
- <i class="fas fa-sort-numeric-down"></i> **NDCG**: 순서를 고려한 랭킹 품질
- <i class="fas fa="list-ol"></i> **MAP**: 평균 정밀도
- <i class="fas fa-trophy"></i> **Hit Rate**: 상위 K개 추천 중 적중률
- <i class="fas fa-star"></i> **MRR**: 평균 역순위

### 비즈니스 지표
- <i class="fas fa-mouse-pointer"></i> **클릭률 (CTR)**: 추천 상품 클릭 비율
- <i class="fas fa-shopping-cart"></i> **전환율**: 클릭 후 구매 비율
- <i class="fas fa-dollar-sign"></i> **매출 기여도**: 추천으로 인한 매출 증가
- <i class="fas fa-users"></i> **고객 만족도**: 추천 품질에 대한 만족도

## 실시간 추천 시스템 아키텍처 {.smaller}

```{mermaid}
graph LR
    A[사용자 행동] --> B[실시간 데이터 수집]
    B --> C[스트리밍 처리]
    C --> D[특징 추출]
    D --> E[모델 서빙]
    E --> F[추천 결과]
    F --> G[캐싱]
    G --> H[API 응답]
    
    I[배치 학습] --> J[모델 업데이트]
    J --> E
    
    K[A/B 테스트] --> L[성능 모니터링]
    L --> M[모델 개선]
    M --> I
```

### 주요 구성 요소
- <i class="fas fa-stream"></i> **실시간 데이터 파이프라인**: Kafka, Kinesis
- <i class="fas fa-server"></i> **모델 서빙**: TensorFlow Serving, MLflow
- <i class="fas fa-database"></i> **캐싱**: Redis, Memcached
- <i class="fas fa-cloud"></i> **클라우드 인프라**: AWS, GCP, Azure

## 추천 시스템의 주요 도전과제 {.smaller}

### 1. Cold Start 문제
::: {.incremental}
- <i class="fas fa-user-plus"></i> **신규 사용자**: 행동 데이터 부족
- <i class="fas fa-box-open"></i> **신규 상품**: 평점/리뷰 부족
- <i class="fas fa-lightbulb"></i> **해결 방안**: 인구통계학적 정보, 콘텐츠 기반 필터링
:::

### 2. 데이터 희소성 (Sparsity)
::: {.incremental}
- <i class="fas fa-th"></i> **사용자-아이템 매트릭스**의 대부분이 빈 값
- <i class="fas fa-percentage"></i> 일반적으로 **99% 이상이 결측값**
- <i class="fas fa-compress"></i> **차원 축소**: SVD, NMF, AutoEncoder
:::

### 3. 확장성 (Scalability)
::: {.incremental}
- <i class="fas fa-users"></i> **수백만 사용자**와 **수백만 상품**
- <i class="fas fa-clock"></i> **실시간 처리** 요구사항
- <i class="fas fa-cogs"></i> **분산 처리**: Spark, Hadoop
:::

## 추천 시스템의 편향과 공정성 {.smaller}

### 주요 편향 유형
- <i class="fas fa-fire"></i> **인기 편향**: 인기 상품만 추천
- <i class="fas fa-redo"></i> **필터 버블**: 기존 취향만 강화
- <i class="fas fa-users"></i> **인구통계학적 편향**: 특정 그룹 차별
- <i class="fas fa="history"></i> **시간적 편향**: 과거 데이터에 의존

### 공정성 확보 방안
::: {.incremental}
- <i class="fas fa-balance-scale"></i> **다양성 증진**: 추천 결과의 다양성 확보
- <i class="fas fa-random"></i> **탐색적 추천**: 새로운 상품 발견 기회 제공
- <i class="fas fa-chart-pie"></i> **공정성 지표**: 그룹별 추천 성능 모니터링
- <i class="fas fa-adjust"></i> **알고리즘 조정**: 편향 완화 기법 적용
:::

## A/B 테스트와 성능 최적화 {.smaller}

### A/B 테스트 설계
```python
import numpy as np
from scipy import stats

class ABTest:
    def __init__(self, control_group, treatment_group):
        self.control = control_group
        self.treatment = treatment_group
    
    def calculate_metrics(self):
        # 전환율 계산
        control_conversion = np.mean(self.control['converted'])
        treatment_conversion = np.mean(self.treatment['converted'])
        
        # 통계적 유의성 검정
        t_stat, p_value = stats.ttest_ind(
            self.control['converted'], 
            self.treatment['converted']
        )
        
        return {
            'control_conversion': control_conversion,
            'treatment_conversion': treatment_conversion,
            'lift': (treatment_conversion - control_conversion) / control_conversion,
            'p_value': p_value,
            'significant': p_value < 0.05
        }
```

### 성능 최적화 전략
- <i class="fas fa-tachometer-alt"></i> **응답 시간**: 100ms 이내 목표
- <i class="fas fa-memory"></i> **메모리 효율성**: 임베딩 압축, 양자화
- <i class="fas fa-sync"></i> **배치 처리**: 여러 사용자 동시 처리
- <i class="fas fa-database"></i> **캐싱 전략**: 인기 상품, 사용자별 추천 결과

## 실제 구현 사례: 패션 이커머스 {.smaller}

### 비즈니스 요구사항
- <i class="fas fa-tshirt"></i> **패션 아이템**: 계절성, 트렌드 민감성
- <i class="fas fa-palette"></i> **시각적 유사성**: 색상, 스타일, 패턴
- <i class="fas fa-ruler"></i> **사이즈 맞춤**: 개인별 사이즈 추천
- <i class="fas fa-tags"></i> **가격 민감도**: 예산 범위 고려

### 구현 접근법
```python
class FashionRecommender:
    def __init__(self):
        self.collaborative_model = CollaborativeFiltering()
        self.content_model = ContentBasedFiltering()
        self.visual_model = VisualSimilarity()
        self.price_model = PriceBasedFiltering()
    
    def get_recommendations(self, user_id, context=None):
        # 다중 모델 결합
        collab_recs = self.collaborative_model.recommend(user_id)
        content_recs = self.content_model.recommend(user_id)
        visual_recs = self.visual_model.recommend(user_id)
        price_recs = self.price_model.recommend(user_id)
        
        # 가중 결합
        final_recs = self.combine_recommendations([
            (collab_recs, 0.4),
            (content_recs, 0.3),
            (visual_recs, 0.2),
            (price_recs, 0.1)
        ])
        
        return final_recs
```

## 추천 시스템 운영 및 모니터링 {.smaller}

### 핵심 모니터링 지표
- <i class="fas fa-chart-line"></i> **실시간 성능**: 응답 시간, 처리량
- <i class="fas fa-percentage"></i> **추천 품질**: CTR, 전환율, 만족도
- <i class="fas fa-exclamation-triangle"></i> **시스템 건강도**: 에러율, 가용성
- <i class="fas fa-coins"></i> **비즈니스 임팩트**: 매출 기여도, ROI

### 운영 자동화
```python
class RecommendationMonitor:
    def __init__(self):
        self.metrics_collector = MetricsCollector()
        self.alerting_system = AlertingSystem()
        
    def monitor_performance(self):
        # 성능 지표 수집
        metrics = self.metrics_collector.collect_metrics()
        
        # 임계값 체크
        if metrics['response_time'] > 200:  # 200ms 초과
            self.alerting_system.send_alert("High response time detected")
        
        if metrics['error_rate'] > 0.01:  # 1% 초과
            self.alerting_system.send_alert("High error rate detected")
        
        # 자동 스케일링
        if metrics['cpu_usage'] > 80:
            self.auto_scale_up()
```

## 미래의 추천 시스템 트렌드 {.smaller}

### 새로운 기술과 접근법
- <i class="fas fa-robot"></i> **대화형 추천**: 챗봇, 음성 인터페이스
- <i class="fas fa-vr-cardboard"></i> **AR/VR 추천**: 가상 체험 기반 추천
- <i class="fas fa-brain"></i> **설명 가능한 AI**: 추천 이유 제공
- <i class="fas fa-shield-alt"></i> **프라이버시 보호**: 연합학습, 차분 프라이버시

### 멀티모달 추천
- <i class="fas fa-image"></i> **이미지 분석**: CNN, Vision Transformer
- <i class="fas fa-comment"></i> **텍스트 분석**: NLP, BERT
- <i class="fas fa-video"></i> **동영상 분석**: 행동 패턴 인식
- <i class="fas fa-microphone"></i> **음성 분석**: 감정, 의도 파악

## 추천 시스템 구축 로드맵 {.smaller}

### Phase 1: 기초 구축 (1-3개월)
::: {.incremental}
- <i class="fas fa-database"></i> **데이터 수집** 인프라 구축
- <i class="fas fa-chart-bar"></i> **기본 분석** 도구 구축
- <i class="fas fa-star"></i> **간단한 추천** 알고리즘 구현
- <i class="fas fa-chart-line"></i> **성과 측정** 시스템 구축
:::

### Phase 2: 고도화 (3-6개월)
::: {.incremental}
- <i class="fas fa-brain"></i> **머신러닝** 모델 도입
- <i class="fas fa-sync"></i> **실시간 추천** 시스템 구축
- <i class="fas fa-flask"></i> **A/B 테스트** 플랫폼 구축
- <i class="fas fa-mobile-alt"></i> **개인화** 강화
:::

### Phase 3: 최적화 (6-12개월)
::: {.incremental}
- <i class="fas fa-robot"></i> **딥러닝** 모델 적용
- <i class="fas fa-globe"></i> **다채널 통합** 추천
- <i class="fas fa-shield-alt"></i> **편향 완화** 및 공정성 확보
- <i class="fas fa-rocket"></i> **성능 최적화** 및 확장성 확보
:::

## 성공 사례 분석 {.smaller}

### Amazon의 "Customers who bought this also bought"
- <i class="fas fa-users"></i> **아이템 기반 협업 필터링** 활용
- <i class="fas fa-clock"></i> **실시간 업데이트**: 구매 즉시 반영
- <i class="fas fa-chart-line"></i> **성과**: 매출의 35% 기여
- <i class="fas fa-key"></i> **핵심**: 단순하지만 효과적인 알고리즘

### Netflix의 개인화 추천
- <i class="fas fa-layer-group"></i> **하이브리드 접근법**: 다양한 알고리즘 결합
- <i class="fas fa-image"></i> **시각적 개인화**: 포스터 이미지도 개인화
- <i class="fas fa-play"></i> **성과**: 시청 시간의 80% 기여
- <i class="fas fa-trophy"></i> **차별점**: 콘텐츠 소비 패턴 깊이 분석

### Spotify의 Discover Weekly
- <i class="fas fa-music"></i> **음악 특성 분석**: 오디오 특징, 가사 분석
- <i class="fas fa-users"></i> **사용자 행동**: 스킵, 반복 재생, 저장
- <i class="fas fa-calendar-week"></i> **주간 업데이트**: 새로운 발견 경험
- <i class="fas fa-heart"></i> **성과**: 사용자 참여도 대폭 증가

## 구현 체크리스트 {.smaller}

### 데이터 준비
- [ ] <i class="fas fa-database"></i> 사용자 행동 데이터 수집 체계 구축
- [ ] <i class="fas fa-box"></i> 상품 메타데이터 정리 및 표준화
- [ ] <i class="fas fa-broom"></i> 데이터 품질 관리 프로세스 구축
- [ ] <i class="fas fa-shield-alt"></i> 개인정보 보호 정책 수립

### 모델 개발
- [ ] <i class="fas fa-flask"></i> 베이스라인 모델 구축
- [ ] <i class="fas fa-chart-bar"></i> 성능 평가 지표 정의
- [ ] <i class="fas fa-sync"></i> 모델 학습 파이프라인 구축
- [ ] <i class="fas fa-robot"></i> 자동화된 모델 업데이트 시스템

### 시스템 구축
- [ ] <i class="fas fa-server"></i> 실시간 서빙 인프라 구축
- [ ] <i class="fas fa-tachometer-alt"></i> 성능 모니터링 시스템 구축
- [ ] <i class="fas fa-flask"></i> A/B 테스트 플랫폼 구축
- [ ] <i class="fas fa-chart-line"></i> 비즈니스 임팩트 측정 도구

## 마무리 {.smaller}

### 핵심 성공 요인
::: {.incremental}
- <i class="fas fa-database"></i> **데이터 품질**: 정확하고 풍부한 데이터
- <i class="fas fa-users"></i> **사용자 중심**: 고객 경험 최우선
- <i class="fas fa-sync"></i> **지속적 개선**: 반복적 최적화
- <i class="fas fa-handshake"></i> **크로스 팀 협업**: 기술-비즈니스 연계
:::

### 추천 시스템의 미래
::: {.incremental}
- <i class="fas fa-brain"></i> **더 지능적**: AI 기술 발전
- <i class="fas fa-eye"></i> **더 개인화**: 개인별 맞춤 경험
- <i class="fas fa-shield-alt"></i> **더 투명**: 설명 가능한 추천
- <i class="fas fa-globe"></i> **더 포용적**: 공정하고 다양한 추천
:::

### 시작하는 방법
1. <i class="fas fa-chart-bar"></i> **현재 상황 분석**: 데이터와 비즈니스 요구사항 파악
2. <i class="fas fa-flag"></i> **목표 설정**: 명확한 성과 지표 정의
3. <i class="fas fa-rocket"></i> **MVP 구축**: 간단한 추천 시스템부터 시작
4. <i class="fas fa-chart-line"></i> **점진적 개선**: 데이터와 피드백 기반 발전

---

## 질문과 토론 {.smaller}

**함께 나누고 싶은 질문들:**

- <i class="fas fa-question-circle"></i> 여러분의 비즈니스에서 추천 시스템이 어떤 가치를 창출할 수 있을까요?
- <i class="fas fa-exclamation-triangle"></i> 추천 시스템 구축 시 가장 큰 도전과제는 무엇일까요?
- <i class="fas fa-lightbulb"></i> 개인화와 다양성의 균형을 어떻게 맞출 수 있을까요?
- <i class="fas fa-shield-alt"></i> 추천 시스템에서 공정성을 어떻게 확보할 수 있을까요?

## 감사합니다 {.center}

**질문이 있으신가요?**

::: {.columns}
::: {.column width="50%"}
**유용한 리소스:**

- [Surprise 라이브러리](https://surpriselib.com)
- [TensorFlow Recommenders](https://www.tensorflow.org/recommenders)
- [RecSys Conference](https://recsys.acm.org)
- [Papers with Code - Recommendation Systems](https://paperswithcode.com/task/recommendation-systems)
:::

::: {.column width="50%"}
**연락처:**

- 이메일: euriion@gmail.com
- 깃허브: github.com/euriion
:::
::: 